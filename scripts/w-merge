#!/bin/bash

function usage() {
  echo "w-merge -o <output-dir> <run-dir> [ <run-dir> ... ]"
  echo "        [ -w <watch-file> ]"
  echo "        watch file entries:"
  echo "           0x12345678|0x14 # node and all edges"
  echo "           0x12345678      # all nodes in a routine"
}

[ "$1" == "--help" ] && usage && exit

test_file="request.tab"

while getopts "o:v:w:s" option
do
  case $option in
    o) output_dir=$OPTARG;;
    v) options="$options -v $OPTARG";;
    w) options="$options -w $OPTARG";;
    s) test_file="node.run";;
  esac
done
shift $(( $OPTIND - 1 ))

[ -z "$output_dir" ] && usage && exit

if [ ! -f $output_dir/cfg.set ]
then # starting a new dataset
  for d in "${@}"
  do
    shift # N.B.: first run is the base!
    [ -s $d/$test_file ] && right=$d && break
  done

  for d in "${@}"
  do
    shift
    [ -s $d/$test_file ] && left=$d && break
  done

  [ -z "$left" ] && left=$right
  [ -z "$right" ] && echo "Failed to find a non-empty run. Exiting with nothing to do." && exit

  echo "Merging $# workers into a new dataset"
  s-merge $options -o $output_dir -l $left -r $right
  [ $? -ne 0 ] && echo "Error, exiting now." && exit
  shift 2
else
  echo "Merge $# workers into dataset $output_dir/cfg.set"
  rm -f $output_dir/merge.log
fi

for d in "${@}"
do
  [ -s $d/$test_file ] || { echo "Skipping empty directory $d" && continue; }
  s-merge $options -o $output_dir -l $d
  [ $? -ne 0 ] && echo "Error, exiting now." && exit
done

